Steps to start the server
============================================================================================================
*	Make sure MongoDB and RabbitMQ servers are setup and running
============================================================================================================
*	Start the django server using
 	> python3 manage.py runserver
============================================================================================================
*	Start the celery worker pool in the same directory
 	> celery -A tasks worker --loglevel=info
============================================================================================================



Special commands for intereacting with the API testing program
Commands:
============================================================================================================
*	help : Lists all the commands available in the api
============================================================================================================
*	change model : Enter the model ID after entering this command. The newly entered model ID will
	be autofilled for all api calls using it
============================================================================================================



API calls
============================================================================================================
*	get token :
	{
		"token": Not required,
        "url": "/model/api/gettoken/",
        "data": {
            "username": str, # The username of the account
            "password": str, # The password of the account
        }
    }

    Returns => The api token for the user
============================================================================================================
*	change password :
    {
    	"token": Required,
        "url": "/model/api/changepassword/",
        "data": {
            "old_password": str, # Old password
            "new_password": str, # New password
        }
    }

    Returns => A success message and changes the current users password
============================================================================================================
*   change token : 
    {
    	"token": Required,
        "url": "/model/api/changetoken/",
        "data": {
                    "username": str, # The username of the account
                    "password": str, # The password of the account
        }
    }

    Returns => The newly generated token for the current user
============================================================================================================
*   get details : 
	{
        "url": "/model/api/getdetails/",
        "data": {
            "trash": bool, # True to look into the trash, false to exclude trash contents
        }
    }

    Returns => A json object with a list of all the models in the below given format:
    			"<Model ID>": [
    			        "<Model Name>",
    			        "<Model Version>",
    			        "<Model Documentation>",
    			        <Model Status Running or Idle>,
    			]
============================================================================================================
*   get model id :
	{
        "url": "/model/api/getmodelid/",
        "data": {
            "name": str, # Name of the model
            "version": str, # Version of the model
            "trash": bool # True to look into the trash, false to exclude trash contents
        }
    }

    Returns => The model id for the above name and version details
============================================================================================================
*   get model :
	{
        "url": "/model/api/getmodel/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Details of the model, including its pickle, previous versions, etc
============================================================================================================
*   get log :
	{
        "url": "/model/api/getlog/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Logs of the model in the following format:
    			[
    				[
    					"<DD-MM-YYYY>",
    					"<Action>",
    					"<Description>",
    				],
    				[
    					"<DD-MM-YYYY>",
    					"<Action>",
    					"<Description>",
    				],

    				.
    				.
    				.

    			]
============================================================================================================
*   get user log :
	{
        "url": "/model/api/getuserlog/",
        "data": {}
    }

    Returns => Logs for all the models of the user
============================================================================================================
*   get date log :
	{
        "url": "/model/api/getdatelog/",
        "data": {
            "date": str, # Date in DD-MM-YYYY format
        }
    }

    Returns => Logs of user activity on a given date
============================================================================================================
*   get traceback :
	{
        "url": "/model/api/gettraceback/",
        "data": {
            "model_id": str # Model Id
        }
    }

    Returns => commit history in the following format:
    			[
    				[
    					"<DD-MM-YYYY>",
    					"<Age>",
    					"<Description>",
    				],
    				[
    					"<DD-MM-YYYY>",
    					"<Age>",
    					"<Description>",
    				],

    				.
    				.
    				.

    			]
============================================================================================================
*   get status :
	{
        "url": "/model/api/getstatus/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Uncommited changes to the model
============================================================================================================
*   delete model :
	{
        "url": "/model/api/deletemodel/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Success message on moving to trash
============================================================================================================
*   restore model :
	{
        "url": "/model/api/restoremodel/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Success message on restoring from trash
============================================================================================================
*   clone model :
	{
        "url": "/model/api/clonemodel/",
        "data": {
            "model_id": str, # Model Id of an existing model that is to be cloned
        }
    }

    Returns => Model ID of the newly cloned model
============================================================================================================
*   upload model :
	{
        "url": "/model/api/uploadmodel/",
        "data": {
            "name": str, # Name of the model
            "version": str, # Version of the model
            "pickle" : str, # Pickle of the model in base64 format
            "docs": str, # Documentation
        }
    }

    Returns => Model ID of the newly created model on success
============================================================================================================
*   edit model :
	{
        "url": "/model/api/editmodel/",
        "data": {
            "model_id": str, # Model Id
            "new_name": str, # New model name
            "new_version": str, # New model version
            "description": str, # Description
            "new_docs": str, # New model documentation
        }
    }

    Returns => Success message on model edit
============================================================================================================
*   commit :
	{
        "url": "/model/api/commit/",
        "data": {
            "model_id": str, # Model Id
            "description": str, # Commit description
        }
    }

    Returns => Success message
============================================================================================================
*   discard :
	{
        "url": "/model/api/discard/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Success message
============================================================================================================
*   rollback :
	{
        "url": "/model/api/rollback/",
        "data": {
            "model_id": str, # Model Id
            "index": str, # Age of the model to be rolled back to
        }
    }

    Returns => Success message
============================================================================================================
*   abort :
	{
        "url": "/model/api/abort/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Success message
============================================================================================================
*   get result :
	{
        "url": "/model/api/getresult/",
        "data": {
            "model_id": str, # Model Id
        }
    }

    Returns => Results of the recent exec command in the following format:
    			[
    				<Exit status>,
    				<Operation>,
    				<Return Values / Error message>,
    			]
============================================================================================================
*   get attribute :
	{
        "url": "/model/api/getattribute/",
        "data": {
            "model_id": str, # Model Id
            "attribute": str, # Attribute name that needs to be accessed
        }
    }

    Returns => The value of the attribute
============================================================================================================
*   exec command :
	{
		"url": "model/api/execcommand/",
		"data": {
			"model_id": str, # Model Id
			"kwargs": bool, # True for kwargs function call, False for args function call
			"function": str, # Name of the function to be executed
			"type_data": str, # String encoded list of the following format:
							  # 	[["Argument Name", "type", Optional_size_arguments],
							  #		 ["Argument Name", "type", Optional_size_arguments]]
							  # Example: [["X", "array", -1, 10], ["y", "array", -1], ["max_iter", "int"]]
			"key": str # Key value pairs of all the int, float, list and bool type data that is mentioned in
					   # type_data 
		}
		"files": {
			# Files with the same name as mentioned in the type_data
			# Files are only needed if the type is of array
			# File myst be of type csv
		}
	}

	Returns => Success message
============================================================================================================
